local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local SOUNDS_FOLDER_PATH = {
    "Assets",
    "Sounds",
    "DefaultHitmarker"
}

local SOUND_REPLACEMENTS = {
    Hitmarker = "rbxassetid://5764886834",
    Headshot = "rbxassetid://5764885315"
}

local function findSoundsFolder()
    local current = ReplicatedStorage
    for _, folderName in ipairs(SOUNDS_FOLDER_PATH) do
        current = current:FindFirstChild(folderName)
        if not current then return nil end
    end
    return current
end

local function replaceSounds()

    local soundsFolder
    while true do
        soundsFolder = findSoundsFolder()
        if soundsFolder then break end
        task.wait(1)
        warn("Folder sounds")
    end
    
    print("")
    
    for soundName, newId in pairs(SOUND_REPLACEMENTS) do
        local sound = soundsFolder:FindFirstChild(soundName)
        if sound and sound:IsA("Sound") then

            if not sound:FindFirstChild("__backup") then
                local backup = sound:Clone()
                backup.Name = "__backup"
                backup.Parent = sound
            end
            
            sound.SoundId = newId
            sound.Volume = 2.0
            
            print("Sound ".. soundName.. " yes")
        else
            warn("Sound ".. soundName.. " no")
        end
    end

    while true do
        for soundName, newId in pairs(SOUND_REPLACEMENTS) do
            local sound = soundsFolder:FindFirstChild(soundName)
            if sound and sound:IsA("Sound") and sound.SoundId ~= newId then
                sound.SoundId = newId
            end
        end
        task.wait(0.5)
    end
end

local function interceptNewSounds()
    workspace.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("Sound") then
            task.wait(0.05)

            for soundName, newId in pairs(SOUND_REPLACEMENTS) do
                if descendant.Name == soundName then
                    descendant.SoundId = newId
                    descendant.Volume = 2.0
                end
            end
        end
    end)
end

local function setupHeadshotDetection()
    local function onCharacterAdded(character)
        local humanoid = character:WaitForChild("Humanoid")
        
        humanoid.Touched:Connect(function(hitPart)
            if hitPart.Name == "Head" then

            end
        end)
    end
    
    Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
    if Players.LocalPlayer.Character then
        onCharacterAdded(Players.LocalPlayer.Character)
    end
end

task.spawn(replaceSounds)
task.spawn(interceptNewSounds)

print("Script work")
print("Hitmarker")
print("Headshot")
